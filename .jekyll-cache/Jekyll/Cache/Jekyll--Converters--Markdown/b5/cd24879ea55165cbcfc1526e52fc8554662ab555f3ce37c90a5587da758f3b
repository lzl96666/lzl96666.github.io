I"H<h2 id="v-modal-修饰符">v-modal 修饰符</h2>
<ol>
  <li>.lazy 在“change”时而非“input”时更新</li>
  <li>.number 输出number类型</li>
  <li>.trim 自动过滤用户输入的首尾空白字符</li>
</ol>

<h2 id="模板中的组件名大小写">模板中的组件名大小写</h2>
<p>对于绝大多数项目来说，在单文件组件和字符串模板中组件名应该总是 PascalCase 的——但是在 DOM 模板中总是 kebab-case 的</p>

<p>不幸的是，由于 HTML 是大小写不敏感的，在 DOM 模板中必须仍使用 kebab-case。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>好例子:

&lt;!-- 在单文件组件和字符串模板中 --&gt;
&lt;MyComponent/&gt;

&lt;!-- 在 DOM 模板中 --&gt;
&lt;my-component&gt;&lt;/my-component&gt;

或者

&lt;!-- 在所有地方 --&gt;
&lt;my-component&gt;&lt;/my-component&gt;

</code></pre></div></div>

<h2 id="prop-的大小写">Prop 的大小写</h2>

<p>HTML 中的 attribute 名是大小写不敏感的，所以浏览器会把所有大写字符解释为小写字符。这意味着当你使用 DOM 中的模板时，camelCase (驼峰命名法) 的 prop 名需要使用其等价的 kebab-case (短横线分隔命名) 命名</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;child :product-data&gt;&lt;/child&gt;

props:{
    productData:
}
</code></pre></div></div>

<h2 id="自定义方法的大小写">自定义方法的大小写</h2>

<p>不同于组件和prop，事件名不存在任何自动化的大小写转换。而是触发的事件名需要完全匹配监听这个事件所用的名称。举个例子，如果触发一个 camelCase 名字的事件：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>this.$emit('myEvent')

</code></pre></div></div>

<h2 id="自定义组件-prop-sync-修饰符">自定义组件 prop .sync 修饰符</h2>
<p>在有些情况下，我们可能需要对一个 prop 进行“双向绑定”。不幸的是，真正的双向绑定会带来维护上的问题，因为子组件可以变更父组件，且在父组件和子组件都没有明显的变更来源。</p>

<p>这也是为什么我们推荐以 update:myPropName 的模式触发事件取而代之</p>

<p>为了方便起见，我们为这种模式提供一个缩写，即 .sync 修饰符：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;text-document v-bind:title.sync="doc.title"&gt;&lt;/text-document&gt;
</code></pre></div></div>

<h2 id="动态组件--异步组件">动态组件 &amp; 异步组件</h2>
<ol>
  <li>keep-alive</li>
  <li>import(‘./my-async-component’)</li>
</ol>

<h2 id="过渡与动画">过渡与动画</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>过渡
&lt;transition name="slide-fade"&gt;
    &lt;p v-if="show"&gt;hello&lt;/p&gt;
&lt;/transition&gt;

动画
  &lt;transition name="bounce"&gt;
    &lt;p v-if="show"&gt;Special&lt;/p&gt;
  &lt;/transition&gt;
  
.bounce-enter-active {
  animation: bounce-in .5s;
}
.bounce-leave-active {
  animation: bounce-in .5s reverse;
}
@keyframes bounce-in {
  0% {
    transform: scale(0);
  }
  50% {
    transform: scale(1.5);
  }
  100% {
    transform: scale(1);
  }
}

</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>与Animate.css结合

  &lt;transition
    name="custom-classes-transition"
    enter-active-class="animated tada"
    leave-active-class="animated bounceOutRight"
  &gt;
    &lt;p v-if="show"&gt;hello&lt;/p&gt;
  &lt;/transition&gt;
  
</code></pre></div></div>

<h2 id="渲染函数">渲染函数</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>object1: // 一个 HTML 标签名、组件选项对象，或者resolve 了上述任何一种的一个 async 函数。必填项

object2:{
  // 与 `v-bind:class` 的 API 相同，
  // 接受一个字符串、对象或字符串和对象组成的数组
  'class': {
    foo: true,
    bar: false
  },
  // 与 `v-bind:style` 的 API 相同，
  // 接受一个字符串、对象，或对象组成的数组
  style: {
    color: 'red',
    fontSize: '14px'
  },
  // 普通的 HTML attribute
  attrs: {
    id: 'foo'
  },
  // 组件 prop
  props: {
    myProp: 'bar'
  },
  // DOM property
  domProps: {
    innerHTML: 'baz'
  },
  // 事件监听器在 `on` 内，
  // 但不再支持如 `v-on:keyup.enter` 这样的修饰器。
  // 需要在处理函数中手动检查 keyCode。
  on: {
    click: this.clickHandler
  },
  // 仅用于组件，用于监听原生事件，而不是组件内部使用
  // `vm.$emit` 触发的事件。
  nativeOn: {
    click: this.nativeClickHandler
  },
  // 自定义指令。注意，你无法对 `binding` 中的 `oldValue`
  // 赋值，因为 Vue 已经自动为你进行了同步。
  directives: [
    {
      name: 'my-custom-directive',
      value: '2',
      expression: '1 + 1',
      arg: 'foo',
      modifiers: {
        bar: true
      }
    }
  ],
  // 作用域插槽的格式为
  // { name: props =&gt; VNode | Array&lt;VNode&gt; }
  scopedSlots: {
    default: props =&gt; createElement('span', props.text)
  },
  // 如果组件是其它组件的子组件，需为插槽指定名称
  slot: 'name-of-slot',
  // 其它特殊顶层 property
  key: 'myKey',
  ref: 'myRef',
  // 如果你在渲染函数中给多个元素都应用了相同的 ref 名，
  // 那么 `$refs.myRef` 会变成一个数组。
  refInFor: true
}

object3:子级虚拟节点 (VNodes)，由 `createElement()` 构建而成

createElement(object1,object2,object3)
</code></pre></div></div>

<h2 id="过滤器">过滤器</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>filters: {
  capitalize: function (value) {
    if (!value) return ''
    value = value.toString()
    return value.charAt(0).toUpperCase() + value.slice(1)
  }
}

</code></pre></div></div>
:ET